import mlflow
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor
from sklearn.svm import LinearSVR
from sklearn.metrics import mean_squared_error

mlflow.set_tracking_uri("http://mlflow:5000")
mlflow.set_experiment("citi-bike")

if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@custom
def transform_custom(data,*args, **kwargs):
    """
    args: The output from any upstream parent blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your custom logic here
    
    [X_train,X_val,y_train,y_val] = data

    # for model_class in (RandomForestRegressor, GradientBoostingRegressor, 
    # ExtraTreesRegressor, LinearSVR):

    #     with mlflow.start_run():

    #         mlflow.log_artifact("preprocessor.b", artifact_path="preprocessor")

    #         mlmodel = model_class()
    #         mlmodel.fit(X_train, y_train)

    #         y_pred = mlmodel.predict(X_val)
    #         rmse = mean_squared_error(y_val, y_pred, squared=False)
    #         mlflow.log_metric("rmse", rmse)

    with mlflow.start_run():
        mlflow.log_artifact("preprocessor.b", artifact_path="preprocessor")
    return {}


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
