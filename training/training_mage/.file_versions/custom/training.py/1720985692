import mlflow
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor
from sklearn.svm import LinearSVR
from sklearn.metrics import root_mean_squared_error

mlflow.set_tracking_uri("http://mlflow:5000")
mlflow.set_experiment("citi-bike")

if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@custom
def transform_custom(*args, **kwargs):
    """
    args: The output from any upstream parent blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your custom logic here

    

    

    for model_class in (RandomForestRegressor, GradientBoostingRegressor, 
    ExtraTreesRegressor, LinearSVR):

        with mlflow.start_run():

            mlflow.log_param("train-data-path", "D:\Study\Conda Projects\mlops-zoom\data\green\green_tripdata_2023-01.parquet")
            mlflow.log_param("valid-data-path", "D:\Study\Conda Projects\mlops-zoom\data\green\green_tripdata_2023-02.parquet")
            mlflow.log_artifact("models/preprocessor.b", artifact_path="preprocessor")

            mlmodel = model_class()
            mlmodel.fit(X_train, y_train)

            y_pred = mlmodel.predict(X_val)
            rmse = mean_squared_error(y_val, y_pred, squared=False)
            mlflow.log_metric("rmse", rmse)
    return {}


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
